{"version":3,"sources":["components/DisplayRecord/index.js","ServiceCalls/index.js","components/HomePage/index.js","components/CarRegistration/index.js","components/RegisteredPerson/index.js","components/Navigation/index.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["DisplayRecord","name","age","contact_number","car_model","car_make_year","data-label","HOST","getAllPeopleInfo","axios","get","then","response","data","catch","err","console","error","getRegisteredPerson","query","getRegisteredCar","carModel","carMakeYear","post","HomePage","useState","allRecords","setAllRecords","success","setSuccess","useEffect","a","records","fetchData","className","scope","map","record","initialState","initialErrorState","CarRegistration","setAllRecord","setQuery","errors","setErrors","handleChange","evt","preventDefault","target","value","type","onChange","placeholder","onClick","errs","push","length","RegisteredPerson","setError","NavigationBar","to","App","Navigation","exact","path","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.aba7014e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst DisplayRecord = ({\r\n    name,\r\n    age,\r\n    contact_number,\r\n    car_model,\r\n    car_make_year\r\n}) => {\r\n    return (\r\n        <tr>\r\n            <td data-label=\">Name\">{name}</td>\r\n            <td data-label=\">Age\">{age}</td>\r\n            <td data-label=\">Contact No\">{contact_number}</td>\r\n            <td data-label=\">Car Model Owned\">{car_model}</td>\r\n            <td data-label=\">Car Make Year\">{car_make_year}</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default DisplayRecord\r\n","import axios from 'axios';\r\n\r\nconst HOST = 'https://insurance-company-xx.herokuapp.com/api/v1';\r\n\r\nexport const getAllPeopleInfo = () => {\r\n    return axios.get(HOST + '/getInfo').then(response => {\r\n        return response.data;\r\n    }).catch(err => {\r\n        console.error('Error: ', err);\r\n        return err;\r\n    })\r\n}\r\n\r\nexport const getRegisteredPerson = (query) => {\r\n    return axios.get(`${HOST}/getPersonInfo/${query}`).then(response => {\r\n        return response.data;\r\n    }).catch(err => {\r\n        console.error('Error: ', err);\r\n        return err;\r\n    })\r\n}\r\n\r\nexport const getRegisteredCar = ({ carModel, carMakeYear }) => {\r\n    return axios.post(HOST + '/isCarRegistered', {\r\n        car_model: carModel,\r\n        car_make_year: carMakeYear\r\n    }).then(response => {\r\n        return response.data;\r\n    }).catch(err => {\r\n        console.error('Error: ', err);\r\n        return err;\r\n    })\r\n}","import React, { useEffect, useState } from 'react';\r\nimport DisplayRecord from '../DisplayRecord';\r\nimport { getAllPeopleInfo } from '../../ServiceCalls';\r\nimport './style.css';\r\n\r\nconst HomePage = () => {\r\n    const [allRecords, setAllRecords] = useState([]);\r\n    const [success, setSuccess] = useState(false);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const records = await getAllPeopleInfo();\r\n\r\n            if (records.success) {\r\n                setSuccess(records.success);\r\n                setAllRecords(records.data);\r\n            }\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <table className='record-table'>\r\n                <caption>All records</caption>\r\n                <thead className='table-header'>\r\n                    <tr>\r\n                        <th scope=\"col\">Name</th>\r\n                        <th scope=\"col\">Age</th>\r\n                        <th scope=\"col\">Contact No</th>\r\n                        <th scope=\"col\">Car Model Owned</th>\r\n                        <th scope=\"col\">Car Make Year</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody className='table-body'>\r\n                    {\r\n                        success && allRecords.map(record => <DisplayRecord key={record.name} {...record} />)\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage;\r\n","import React, { useState } from 'react';\r\nimport { getRegisteredCar } from '../../ServiceCalls';\r\nimport './style.css';\r\n\r\nconst initialState = {\r\n    carMakeYear: '',\r\n    carModel: ''\r\n};\r\n\r\nconst initialErrorState = {\r\n    carMakeYear: false,\r\n    carModel: false\r\n}\r\n\r\nconst CarRegistration = () => {\r\n    const [record, setAllRecord] = useState([]);\r\n    const [success, setSuccess] = useState(false);\r\n    const [query, setQuery] = useState(initialState);\r\n    const [errors, setErrors] = useState(initialErrorState);\r\n\r\n    const handleChange = evt => {\r\n        evt.preventDefault();\r\n        setQuery({\r\n            ...query,\r\n            [evt.target.name]: evt.target.value\r\n        });\r\n        setErrors({\r\n            ...errors,\r\n            [evt.target.name]: false\r\n        });\r\n    }\r\n\r\n    const handleClick = evt => {\r\n        evt.preventDefault();\r\n        if (!query['carMakeYear'] || !query['carModel']) {\r\n            const errs = [];\r\n            if (!query['carMakeYear']) {\r\n                errs.push({ carMakeYear: true });\r\n            }\r\n            if (!query['carModel']) {\r\n                errs.push({ carModel: true });\r\n            }\r\n            setErrors({\r\n                carMakeYear: !!errs[0].carMakeYear,\r\n                carModel: !!errs[1].carModel\r\n            });\r\n            return;\r\n        }\r\n\r\n        async function fetchData() {\r\n            setErrors(initialErrorState);\r\n            setSuccess(false);\r\n            setAllRecord([]);\r\n\r\n            const records = await getRegisteredCar(query);\r\n            if (records.success) {\r\n                setSuccess(records.success);\r\n                setAllRecord(records.data);\r\n                setQuery(initialState);\r\n            }\r\n        }\r\n        fetchData();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='input-form-container'>\r\n                <div className='input-field-wrapper'>\r\n                    <input\r\n                        type='text'\r\n                        value={query['carModel']}\r\n                        name='carModel'\r\n                        className={errors['carModel'] ? 'has-error' : ''}\r\n                        onChange={handleChange}\r\n                        placeholder='Enter name....'\r\n                    />\r\n                </div>\r\n                <div className='input-field-wrapper'>\r\n                    <input\r\n                        type='text'\r\n                        value={query['carMakeYear']}\r\n                        name='carMakeYear'\r\n                        className={errors['carMakeYear'] ? 'has-error' : ''}\r\n                        onChange={handleChange}\r\n                        placeholder='Enter name....'\r\n                    />\r\n                </div>\r\n                <div className='input-field-wrapper'>\r\n                    <button\r\n                        type='text'\r\n                        onClick={handleClick}\r\n                        placeholder='Enter name....'\r\n                    >\r\n                        {'CHECK'}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {\r\n                record.length > 0 && success === true &&\r\n                (\r\n                    <div className='registered'>\r\n                        {'Car is registered with the company.'}\r\n                    </div>\r\n                )\r\n            }\r\n            {\r\n                record.length === 0 && success === true &&\r\n                (\r\n                    <div className='no-records'>\r\n                        {'Car is not registered with the company.'}\r\n                    </div>\r\n                )\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CarRegistration;\r\n","import React, { useState } from 'react';\r\nimport DisplayRecord from '../DisplayRecord';\r\nimport { getRegisteredPerson } from '../../ServiceCalls';\r\nimport './style.css';\r\n\r\nconst RegisteredPerson = () => {\r\n    const [record, setAllRecord] = useState([]);\r\n    const [success, setSuccess] = useState(false);\r\n    const [query, setQuery] = useState('');\r\n    const [error, setError] = useState(false);\r\n\r\n    const handleChange = evt => {\r\n        evt.preventDefault();\r\n        setQuery(evt.target.value);\r\n        setError(false);\r\n    }\r\n\r\n    const handleClick = evt => {\r\n        evt.preventDefault();\r\n        if (!query) {\r\n            setError(true);\r\n            return;\r\n        }\r\n\r\n        async function fetchData() {\r\n            setError(false);\r\n            setSuccess(false);\r\n            setAllRecord([]);\r\n\r\n            const records = await getRegisteredPerson(query);\r\n            if (records.success) {\r\n                setSuccess(records.success);\r\n                setAllRecord(records.data);\r\n                setQuery('');\r\n            }\r\n        }\r\n        fetchData();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='input-form-container'>\r\n                <div className='input-field-wrapper'>\r\n                    <input\r\n                        type='text'\r\n                        value={query}\r\n                        className={error ? 'has-error' : ''}\r\n                        onChange={handleChange}\r\n                        placeholder='Enter name....'\r\n                    />\r\n                </div>\r\n                <div className='input-field-wrapper'>\r\n                    <button\r\n                        type='text'\r\n                        onClick={handleClick}\r\n                        placeholder='Enter name....'\r\n                    >\r\n                        {'CHECK'}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {\r\n                record.length > 0 && success === true &&\r\n                (\r\n                    <table className='record-table'>\r\n                        <caption>All records</caption>\r\n                        <thead className='table-header'>\r\n                            <tr>\r\n                                <th scope=\"col\">Name</th>\r\n                                <th scope=\"col\">Age</th>\r\n                                <th scope=\"col\">Contact No</th>\r\n                                <th scope=\"col\">Car Model Owned</th>\r\n                                <th scope=\"col\">Car Make Year</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody className='table-body'>\r\n                            {\r\n                                record.map(record => <DisplayRecord key={record.name} {...record} />)\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                )\r\n            }\r\n            {\r\n                record.length === 0 && success === true &&\r\n                (\r\n                    <div className='no-records'>\r\n                        {'No records found....'}\r\n                    </div>\r\n                )\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RegisteredPerson;\r\n","import React from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport './style.css';\r\n\r\nconst NavigationBar = () => {\r\n    return (\r\n        <div className='navigation'>\r\n            <ul>\r\n                <RouterLink to='/' className='navigation-nav'>\r\n                    <li >All Records</li>\r\n                </RouterLink>\r\n                <RouterLink to='/check-user' className='navigation-nav'>\r\n                    <li >Check User</li>\r\n                </RouterLink>\r\n                <RouterLink to='/car-register' className='navigation-nav'>\r\n                    <li >Check Car</li>\r\n                </RouterLink>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavigationBar;\r\n\r\n","import React from 'react';\nimport { Route } from \"react-router-dom\";\nimport { HomePage, RegisteredPerson, CarRegistration, Navigation } from './components';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Insurance Company Information</h1>\n      </header>\n      <main className=\"App-main\">\n        <div>\n          <Navigation />\n        </div>\n        <div>\n          <Route exact path=\"/\"><HomePage /></Route>\n          <Route exact path=\"/check-user\"><RegisteredPerson /></Route>\n          <Route exact path=\"/car-register\"><CarRegistration /></Route>\n          {/* <Route exact path=\"/home\"><HomePage /></Route> */}\n        </div>\n      </main>\n      <footer className='footer'>\n          {'Developed by Nandkumar Gangai.'}\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}